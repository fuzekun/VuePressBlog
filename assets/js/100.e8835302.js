(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{561:function(_,v,t){"use strict";t.r(v);var l=t(1),r=Object(l.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[_._v("建造者模式（Builder Pattern）")]),_._v(" "),v("h3",{attrs:{id:"_1、介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、介绍"}},[_._v("#")]),_._v(" 1、介绍")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("什么是建造者模式")])])]),_._v(" "),v("p",[_._v("建造者模式是将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。创建者模式隐藏了复杂对象的创建过程，它把复杂对象的创建过程加以抽象，通过子类继承或者重载的方式，动态的创建具有复合属性的对象")]),_._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[_._v("建造者模式的使用场景")])]),_._v(" "),v("p",[_._v("·隔离复杂对象的创建和使用，相同的方法，不同执行顺序，产生不同的事件结果")]),_._v(" "),v("p",[_._v("·多个部件都可以装配到一个对象中，但产生的运行结果不相同")]),_._v(" "),v("p",[_._v("·产品类非常复杂或者产品类因为调用顺序不同而产生不同作用")]),_._v(" "),v("p",[_._v("·初始化一个对象时，参数过多，或者很多参数具有默认值")]),_._v(" "),v("p",[_._v("·Builder模式不适合创建差异性很大的产品类")]),_._v(" "),v("p",[_._v("产品内部变化复杂，会导致需要定义很多具体建造者类实现变化，增加项目中类的数量，增加系统的理解难度和运行成本")]),_._v(" "),v("p",[_._v("·需要生成的产品对象有复杂的内部结构，这些产品对象具备共性；")]),_._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[_._v("建造者模式的主要作用")])]),_._v(" "),v("p",[_._v("在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。")]),_._v(" "),v("p",[_._v("·用户只需要给出指定复杂对象的类型和内容；")]),_._v(" "),v("p",[_._v("·建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）")]),_._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[_._v("建造者模式解决的问题")])]),_._v(" "),v("p",[_._v("·方便用户创建复杂对象（不需要知道实现过程）")]),_._v(" "),v("p",[_._v("·代码复用性&封装性（将对象构建过程和细节进行封装&复用）")]),_._v(" "),v("p",[_._v("例子：造汽车 & 买汽车。")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("工厂（建造者模式）：负责制造汽车（组装过>程和细节在工厂内）")])]),_._v(" "),v("li",[v("p",[_._v("汽车购买者（用户）：你只需要说出你需要的>型号（对象的类型和内容），然后直接购买就可>>以使用了\n（不需要知道汽车是怎么组装的（车轮、车门、>发动机、方向盘等等））")])])])])}),[],!1,null,null,null);v.default=r.exports}}]);