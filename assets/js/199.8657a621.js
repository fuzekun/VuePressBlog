(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{660:function(o,e,i){"use strict";i.r(e);var s=i(1),v=Object(s.a)({},(function(){var o=this,e=o._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("h3",{attrs:{id:"cookie和session的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie和session的区别"}},[o._v("#")]),o._v(" Cookie和session的区别")]),o._v(" "),e("p",[o._v("cookie是服务器颁发给客户端浏览器的凭证，存储在客户端")]),o._v(" "),e("p",[o._v("session是客户端存储的服务器端的用户信息，存储在服务器端")]),o._v(" "),e("p",[o._v("cookie的大小不能超过4K，很多网站限制cookie的数量不能超过20个，但是对session没有限制")]),o._v(" "),e("p",[o._v("cookie是不安全的，会引发cookie欺骗，而session是安全的")]),o._v(" "),e("p",[o._v("但是session较大，在服务器端存储会占用较多服务器的性能，所以考虑性能应该选择cookie")]),o._v(" "),e("p",[o._v("会话（Session）跟踪是Web程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是Cookie与Session。Cookie通过在客户端记录信息确认用户身份，Session通过在服务器端记录信息确认用户身份。")]),o._v(" "),e("p",[o._v("1.1 "),e("code",[o._v("Cookie")]),o._v("机制")]),o._v(" "),e("p",[o._v("在程序中，会话跟踪是很重要的事情。理论上，一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话，二者不能混淆。例如，用户A在超市购买的任何商品都应该放在A的购物车内，不论是用户A什么时间购买的，这都是属于同一个会话的，不能放入用户B或用户C的购物车内，这不属于同一个会话。")]),o._v(" "),e("p",[o._v("而Web应用程序是使用HTTP协议传输数据的。"),e("code",[o._v("HTTP")]),o._v("协议是无状态的协议。一旦数据交换完毕，客户端与服务器端的连接就会关闭，再次交换数据需要建立新的连接。这就意味着服务器无法从连接上跟踪会话。即用户A购买了一件商品放入购物车内，当再次购买商品时服务器已经无法判断该购买行为是属于用户A的会话还是用户B的会话了。要跟踪该会话，必须引入一种机制。")]),o._v(" "),e("p",[o._v("Cookie就是这样的一种机制。它可以弥补HTTP协议无状态的不足。在Session出现之前，基本上所有的网站都采用Cookie来跟踪会话。")]),o._v(" "),e("p",[o._v("1.1.1什么是"),e("code",[o._v("cookie")]),o._v("？")]),o._v(" "),e("p",[e("code",[o._v("Cookie")]),o._v("意为“甜饼”，是由W3C组织提出，最早由"),e("code",[o._v("Netscape")]),o._v("社区发展的一种机制。目前Cookie已经成为标准，所有的主流浏览器如IE、Netscape、Firefox、Opera等都支持Cookie。")]),o._v(" "),e("p",[o._v("由于"),e("code",[o._v("HTTP")]),o._v("是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就"),e("strong",[o._v("给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理")]),o._v("。")]),o._v(" "),e("p",[e("code",[o._v("Cookie")]),o._v("实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。")]),o._v(" "),e("p",[e("strong",[o._v("所以项目中的登录凭证是存在cookie里的，这样每一次客户端浏览器给服务器发送请求都会协带该cookie，进行验证。")])]),o._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/b5925c774b5341d48f690cd9e1fc3e13.png",alt:"在这里插入图片描述"}})]),o._v(" "),e("p",[o._v("1.1.2 记录用户访问次数")]),o._v(" "),e("p",[o._v("Java中把Cookie封装成了javax.servlet.http.Cookie类。每个Cookie都是该Cookie类的对象。服务器通过操作"),e("code",[o._v("Cookie")]),o._v("类对象对客户端Cookie进行操作。通过**"),e("code",[o._v("request.getCookie()")]),o._v("获取客户端提交的所有Cookie**（以Cookie[]数组形式返回），"),e("strong",[o._v("通过response.addCookie(Cookiecookie)向客户端设置Cookie")]),o._v("。")]),o._v(" "),e("p",[o._v("Cookie对象使用key-value属性对的形式保存用户状态，一个Cookie对象保存一个属性对，一个request或者response同时使用多个Cookie。因为Cookie类位于包javax.servlet.http.*下面，所以JSP中不需要import该类。")]),o._v(" "),e("p",[o._v("1.1.3 Cookie的不可跨域名性")]),o._v(" "),e("p",[o._v("很多网站都会使用Cookie。例如，Google会向客户端颁发Cookie，Baidu也会向客户端颁发Cookie。那浏览器访问Google会不会也携带上Baidu颁发的Cookie呢？或者Google能不能修改Baidu颁发的Cookie呢？")]),o._v(" "),e("p",[o._v("答案是否定的。Cookie具有不可跨域名性。根据Cookie规范，浏览器访问Google只会携带Google的Cookie，而不会携带Baidu的Cookie。Google也只能操作Google的Cookie，而不能操作Baidu的Cookie。")]),o._v(" "),e("p",[o._v("Cookie在客户端是由浏览器来管理的。浏览器能够保证Google只会操作Google的Cookie而不会操作Baidu的Cookie，从而保证用户的隐私安全。浏览器判断一个网站是否能操作另一个网站Cookie的依据是域名。Google与Baidu的域名不一样，因此Google不能操作Baidu的Cookie。")]),o._v(" "),e("p",[o._v("需要注意的是，虽然网站images.google.com与网站www.google.com同属于Google，但是域名不一样，二者同样不能互相操作彼此的Cookie。")]),o._v(" "),e("p",[o._v("1.1.4 Unicode编码：保存中文")]),o._v(" "),e("p",[o._v("中文与英文字符不同，中文属于Unicode字符，在内存中占4个字符，而英文属于ASCLL字符，内存中只占2个字节。Cookie中使用Unicode字符时需要对Unicode字符进行编码，否则会乱码。")]),o._v(" "),e("p",[o._v("提示：Cookie中保存中文只能编码。一般使用UTF-8编码即可。不推荐使用GBK等中文编码，因为浏览器不一定支持，而且JavaScript也不支持GBK编码。")]),o._v(" "),e("p",[o._v("1.1.5 BASE64编码：保存二进制图片")]),o._v(" "),e("p",[o._v("Cookie不仅可以使用ASCII字符与Unicode字符，还可以使用二进制数据。例如在Cookie中使用数字证书，提供安全度。使用二进制数据时也需要进行编码。")]),o._v(" "),e("p",[o._v("注意：本程序仅用于展示Cookie中可以存储二进制内容，并不实用。由于浏览器每次请求服务器都会携带Cookie，因此Cookie内容不宜过多，否则影响速度。Cookie的内容应该少而精。")]),o._v(" "),e("p",[o._v("1.1.6 设置cookie的所有属性")]),o._v(" "),e("p",[o._v("除了name与value之外，Cookie还具有其他几个常用的属性。每个属性对应一个getter方法与一个setter方法。Cookie类的所有属性如表1.1所示。")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/3b0d6bd8cb5a4d5db98901feda942ec9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGVlZGNvZGVKb2huMDE=,size_20,color_FFFFFF,t_70,g_se,x_16",alt:"在这里插入图片描述"}})]),o._v(" "),e("p",[o._v("1.1.7 "),e("code",[o._v("Cookie")]),o._v("的有效期")]),o._v(" "),e("p",[o._v("Cookie的maxAge决定着Cookie的有效期，单位为秒（Second）。Cookie中通过getMaxAge()方法与setMaxAge(int maxAge)方法来读写maxAge属性。")]),o._v(" "),e("p",[o._v("如果maxAge属性为正数，则表示该Cookie会在maxAge秒之后自动失效。浏览器会将maxAge为正数的Cookie持久化，即写到对应的Cookie文件中。无论客户关闭了浏览器还是电脑，只要还在maxAge秒之前，登录网站时该Cookie仍然有效。下面代码中的Cookie信息将永远有效。")]),o._v(" "),e("p",[e("strong",[o._v('Cookie cookie = new Cookie("username","helloweenvsfei");   // 新建Cookie')]),o._v(" "),e("strong",[o._v("cookie.setMaxAge(Integer.MAX_VALUE);           // 设置生命周期为MAX_VALUE")]),o._v(" "),e("strong",[o._v("response.addCookie(cookie);                    // 输出到客户端")])]),o._v(" "),e("p",[o._v("如果maxAge为负数，则表示该Cookie仅在本浏览器窗口以及本窗口打开的子窗口内有效，关闭窗口后该Cookie即失效。maxAge为负数的Cookie，为临时性Cookie，不会被持久化，不会被写到Cookie文件中。Cookie信息保存在浏览器内存中，因此关闭浏览器该Cookie就消失了。Cookie默认的maxAge值为–1。")]),o._v(" "),e("p",[o._v("如果maxAge为0，则表示删除该Cookie。Cookie机制没有提供删除Cookie的方法，因此通过设置该Cookie即时失效实现删除Cookie的效果。失效的Cookie会被浏览器从Cookie文件或者内存中删除.")]),o._v(" "),e("p",[o._v("例如：")]),o._v(" "),e("p",[e("strong",[o._v('Cookie cookie = new Cookie("username","helloweenvsfei");   // 新建Cookie')]),o._v(" "),e("strong",[o._v("cookie.setMaxAge(0);                          // 设置生命周期为0，不能为负数")]),o._v(" "),e("strong",[o._v("response.addCookie(cookie);                    // 必须执行这一句")])]),o._v(" "),e("p",[o._v("response对象提供的Cookie操作方法只有一个添加操作add(Cookie cookie)。")]),o._v(" "),e("p",[o._v("要想修改Cookie只能使用一个同名的Cookie来覆盖原来的Cookie，达到修改的目的。删除时只需要把maxAge修改为0即可。")]),o._v(" "),e("p",[o._v("注意：从客户端读取Cookie时，包括maxAge在内的其他属性都是不可读的，也不会被提交。浏览器提交Cookie时只会提交name与value属性。maxAge属性只被浏览器用来判断Cookie是否过期。")]),o._v(" "),e("p",[o._v("1.1.8 "),e("code",[o._v("Cookie")]),o._v("的修改、删除")]),o._v(" "),e("p",[o._v("Cookie并不提供修改、删除操作。如果要修改某个Cookie，只需要新建一个同名的Cookie，添加到response中覆盖原来的Cookie。")]),o._v(" "),e("p",[o._v("如果要删除某个Cookie，只需要新建一个同名的Cookie，并将maxAge设置为0，并添加到response中覆盖原来的Cookie。注意是0而不是负数。负数代表其他的意义。读者可以通过上例的程序进行验证，设置不同的属性。")]),o._v(" "),e("p",[o._v("注意：修改、删除Cookie时，新建的Cookie除value、maxAge之外的所有属性，例如name、path、domain等，都要与原Cookie完全一样。否则，浏览器将视为两个不同的Cookie不予覆盖，导致修改、删除失败。")]),o._v(" "),e("p",[o._v("1.1.9 Cookie的域名")]),o._v(" "),e("p",[o._v("Cookie是不可跨域名的。域名www.google.com颁发的Cookie不会被提交到域名www.baidu.com去。这是由Cookie的隐私安全机制决定的。隐私安全机制能够禁止网站非法获取其他网站的Cookie。")]),o._v(" "),e("p",[o._v("正常情况下，同一个一级域名下的两个二级域名如www.helloweenvsfei.com和images.helloweenvsfei.com也不能交互使用Cookie，因为二者的域名并不严格相同。如果想所有helloweenvsfei.com名下的二级域名都可以使用该Cookie，需要设置Cookie的domain参数，例如：")]),o._v(" "),e("p",[e("strong",[o._v('Cookie cookie = new Cookie("time","20080808"); // 新建Cookie')])]),o._v(" "),e("p",[e("strong",[o._v('cookie.setDomain(".helloweenvsfei.com");           // 设置域名')])]),o._v(" "),e("p",[e("strong",[o._v('cookie.setPath("/");                              // 设置路径')])]),o._v(" "),e("p",[e("strong",[o._v("cookie.setMaxAge(Integer.MAX_VALUE);               // 设置有效期")])]),o._v(" "),e("p",[e("strong",[o._v("response.addCookie(cookie);                       // 输出到客户端")])]),o._v(" "),e("p",[o._v("读者可以修改本机C:\\WINDOWS\\system32\\drivers\\etc下的hosts文件来配置多个临时域名，然后使用setCookie.jsp程序来设置跨域名Cookie验证domain属性。")]),o._v(" "),e("p",[o._v('注意：domain参数必须以点(".")开始。另外，name相同但domain不同的两个Cookie是两个不同的Cookie。如果想要两个域名完全不同的网站共有Cookie，可以生成两个Cookie，domain属性分别为两个域名，输出到客户端。')]),o._v(" "),e("p",[o._v("1.1.10 "),e("code",[o._v("Cookie")]),o._v("的路径")]),o._v(" "),e("p",[o._v("domain属性决定运行访问Cookie的域名，而path属性决定允许访问Cookie的路径（ContextPath）。例如，如果只允许/sessionWeb/下的程序使用Cookie，可以这么写：")]),o._v(" "),e("p",[e("strong",[o._v('Cookie cookie = new Cookie("time","20080808");     // 新建Cookie')])]),o._v(" "),e("p",[e("strong",[o._v('cookie.setPath("/session/");                          // 设置路径')])]),o._v(" "),e("p",[e("strong",[o._v("response.addCookie(cookie);                           // 输出到客户端")])]),o._v(" "),e("p",[o._v("设置为“/”时允许所有路径使用Cookie。path属性需要使用符号“/”结尾。name相同但domain相同的两个Cookie也是两个不同的Cookie。")]),o._v(" "),e("p",[o._v("注意：页面只能获取它属于的Path的Cookie。例如/session/test/a.jsp不能获取到路径为/session/abc/的Cookie。使用时一定要注意。")]),o._v(" "),e("p",[o._v("1.1.11 Cookie的安全属性")]),o._v(" "),e("p",[e("code",[o._v("HTTP")]),o._v("协议不仅是无状态的，而且是不安全的。使用HTTP协议的数据不经过任何加密就直接在网络上传播，有被截获的可能。使用HTTP协议传输很机密的内容是一种隐患。"),e("strong",[o._v("如果不希望Cookie在HTTP等非安全协议中传输，可以设置Cookie的secure属性为true。浏览器只会在HTTPS和SSL等安全协议中传输此类Cookie")]),o._v("。下面的代码设置secure属性为true：")]),o._v(" "),e("p",[e("strong",[o._v('Cookie cookie = new Cookie("time", "20080808"); // 新建Cookie')])]),o._v(" "),e("p",[e("strong",[o._v("cookie.setSecure(true);                           // 设置安全属性")])]),o._v(" "),e("p",[e("strong",[o._v("response.addCookie(cookie);                        // 输出到客户端")])]),o._v(" "),e("p",[o._v("提示：secure属性并不能对Cookie内容加密，因而不能保证绝对的安全性。如果需要高安全性，需要在程序中对Cookie内容加密、解密，以防泄密。")]),o._v(" "),e("p",[o._v("1.1.12 JavaScript操作cookie")]),o._v(" "),e("p",[o._v("Cookie是保存在浏览器端的，因此浏览器具有操作Cookie的先决条件。浏览器可以使用脚本程序如JavaScript或者VBScript等操作Cookie。这里以JavaScript为例介绍常用的Cookie操作。例如下面的代码会输出本页面所有的Cookie。")]),o._v(" "),e("p",[e("strong",[e("script",[o._v("document.write(document.cookie);")])])]),o._v(" "),e("p",[o._v("由于JavaScript能够任意地读写Cookie，有些好事者便想使用JavaScript程序去窥探用户在其他网站的Cookie。不过这是徒劳的，W3C组织早就意识到JavaScript对Cookie的读写所带来的安全隐患并加以防备了，W3C标准的浏览器会阻止JavaScript读写任何不属于自己网站的Cookie。换句话说，A网站的JavaScript程序读写B网站的Cookie不会有任何结果。")]),o._v(" "),e("p",[o._v("1.1.13 案例：永久登录")]),o._v(" "),e("p",[o._v("如果用户是在自己家的电脑上上网，登录时就可以记住他的登录信息，下次访问时不需要再次登录，直接访问即可。实现方法是"),e("strong",[o._v("把登录信息如账号、密码等保存在Cookie中，并控制Cookie的有效期，下次访问时再验证Cookie中的登录信息即可")]),o._v("。")]),o._v(" "),e("p",[o._v("保存登录信息有多种方案。最直接的是把用户名与密码都保持到Cookie中，下次访问时检查Cookie中的用户名与密码，与数据库比较。这是"),e("strong",[o._v("一种比较危险的选择，一般不把密码等重要信息保存到Cookie中")]),o._v("。")]),o._v(" "),e("p",[o._v("还有"),e("strong",[o._v("一种方案是把密码加密后保存到Cookie中，下次访问时解密并与数据库比较")]),o._v("。这种方案略微安全一些。如果不希望保存密码，还可以把登录的时间戳保存到Cookie与数据库中，到时只验证用户名与登录时间戳就可以了。")]),o._v(" "),e("p",[o._v("这几种方案验证账号时都要查询数据库.")]),o._v(" "),e("p",[o._v("本例将采用另一种方案，只在登录时查询一次数据库，以后访问验证登录信息时不再查询数据库。实现方式是把账号按照一定的规则加密后，连同账号一块保存到Cookie中。下次访问时只需要判断账号的加密规则是否正确即可。本例把账号保存到名为account的Cookie中，把账号连同密钥用MD1算法加密后保存到名为ssid的Cookie中。验证时验证Cookie中的账号与密钥加密后是否与"),e("code",[o._v("Cookie")]),o._v("中的"),e("code",[o._v("ssid")]),o._v("相等。")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/19f6efe9155547acae87384b96f46784.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGVlZGNvZGVKb2huMDE=,size_14,color_FFFFFF,t_70,g_se,x_16",alt:"在这里插入图片描述"}})]),o._v(" "),e("p",[o._v("1.2 "),e("code",[o._v("Session")]),o._v("机制")]),o._v(" "),e("p",[o._v("除了使用Cookie，Web应用程序中还经常使用Session来记录客户端状态。"),e("code",[o._v("Session是服务器端使用的一种记录客户端状态的机制")]),o._v("，使用上比Cookie简单一些，相应的也"),e("code",[o._v("增加了服务器的存储压力")]),o._v("。")]),o._v(" "),e("p",[o._v("1.2.1 什么是session")]),o._v(" "),e("p",[e("strong",[o._v("Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上")]),o._v("。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。")]),o._v(" "),e("p",[o._v("如果说"),e("strong",[o._v("Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。所以将用户的验证码保存在session中")]),o._v("。")]),o._v(" "),e("p",[o._v("1.2.2 实现用户登录")]),o._v(" "),e("p",[o._v("Session对应的类为javax.servlet.http.HttpSession类。每个来访者对应一个Session对象，所有该客户的状态信息都保存在这个Session对象里。"),e("strong",[o._v("Session对象是在客户端第一次请求服务器的时候创建的")]),o._v("。Session也是一种key-value的属性对，通过getAttribute(Stringkey)和setAttribute(String key，Objectvalue)方法读写客户状态信息。Servlet里通过request.getSession()方法获取该客户的Session，例如:")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/c36dcfb611b24137915133418ccc0105.png",alt:"在这里插入图片描述"}})]),o._v(" "),e("p",[e("code",[o._v("request")]),o._v("还可以使用getSession(boolean create)来获取Session。区别是如果该客户的Session不存在，request.getSession()方法会返回null，而getSession(true)会先创建Session再将Session返回。")]),o._v(" "),e("p",[o._v('Servlet中必须使用request来编程式获取HttpSession对象，而JSP中内置了Session隐藏对象，可以直接使用。如果使用声明了<%@page session="false" %>，则Session隐藏对象不可用。')]),o._v(" "),e("p",[o._v("1.2.3 Session的生命周期")]),o._v(" "),e("p",[o._v("Session的超时时间也可以在web.xml中修改。另外，通过调用Session的invalidate()方法可以使Session失效。"),e("code",[o._v("Session")]),o._v("保存在服务器端。"),e("strong",[o._v("为了获得更高的存取速度，服务器一般把Session放在内存里。每个用户都会有一个独立的Session。如果Session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，Session里的信息应该尽量精简。")])]),o._v(" "),e("p",[e("strong",[o._v("Session在用户第一次访问服务器的时候自动创建")]),o._v("。需要注意只有访问JSP、Servlet等程序时才会创建Session，只访问HTML、IMAGE等静态资源并不会创建Session。如果尚未生成Session，也可以使用request.getSession(true)强制生成Session。")]),o._v(" "),e("p",[e("strong",[o._v("Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，并维护该Session")]),o._v("。用户每访问服务器一次，无论是否读写Session，服务器都认为该用户的Session“活跃（active）”了一次。")]),o._v(" "),e("p",[o._v("1.2.4 Session的有效期")]),o._v(" "),e("p",[o._v("由于会有越来越多的用户访问服务器，因此"),e("code",[o._v("Session")]),o._v("也会越来越多。"),e("strong",[o._v("为防止内存溢出，服务器会把长时间内没有活跃的Session从内存删除。这个时间就是Session的超时时间。如果超过了超时时间没访问过服务器，Session就自动失效了。")])]),o._v(" "),e("p",[o._v("Session的超时时间为maxInactiveInterval属性，可以通过对应的getMaxInactiveInterval()获取，通过setMaxInactiveInterval(longinterval)修改。")]),o._v(" "),e("p",[o._v("Session的超时时间也可以在web.xml中修改。另外，通过调用Session的invalidate()方法可以使Session失效。")]),o._v(" "),e("p",[o._v("1.2.5 Session的常用方法")]),o._v(" "),e("p",[o._v("Session中包括各种方法，使用起来要比Cookie方便得多。Session的常用方法如表所示.")]),o._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/cf78b87beac54664a596a64095911925.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGVlZGNvZGVKb2huMDE=,size_20,color_FFFFFF,t_70,g_se,x_16",alt:"在这里插入图片描述"}})]),o._v(" "),e("p",[o._v("1.2.6 Session对浏览器的要求")]),o._v(" "),e("p",[o._v("虽然Session保存在服务器，对客户端是透明的，它的正常运行仍然需要客户端浏览器的支持。这是因为Session需要使用Cookie作为识别标志。HTTP协议是无状态的，Session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，它的值为该Session的id（也就是HttpSession.getId()的返回值）。Session依据该Cookie来识别是否为同一用户。")]),o._v(" "),e("p",[o._v("该Cookie为服务器自动生成的，它的maxAge属性一般为–1，表示仅当前浏览器内有效，并且各浏览器窗口间不共享，关闭浏览器就会失效。")]),o._v(" "),e("p",[o._v("因此同一机器的两个浏览器窗口访问服务器时，会生成两个不同的Session。但是由浏览器窗口内的链接、脚本等打开的新窗口（也就是说不是双击桌面浏览器图标等打开的窗口）除外。这类子窗口会共享父窗口的Cookie，因此会共享一个Session。")]),o._v(" "),e("p",[o._v("注意：新开的浏览器窗口会生成新的Session，但子窗口除外。子窗口会共用父窗口的Session。例如，在链接上右击，在弹出的快捷菜单中选择“在新窗口中打开”时，子窗口便可以访问父窗口的Session。")]),o._v(" "),e("p",[o._v("如果客户端浏览器将Cookie功能禁用，或者不支持Cookie怎么办？例如，绝大多数的手机浏览器都不支持Cookie。Java Web提供了另一种解决方案：URL地址重写。")]),o._v(" "),e("p",[e("strong",[o._v("就是说客户端为了能识别服务器端的session，服务器端给客户端颁发一个值为客户端sessionID的cookie，这样下次客户端访问服务器时，就可以携带上此cookie与服务器端的session匹配了。")])]),o._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/dbdca7c07b1847268b1b09a67398d779.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGVlZGNvZGVKb2huMDE=,size_14,color_FFFFFF,t_70,g_se,x_16",alt:"在这里插入图片描述"}})]),o._v(" "),e("p",[o._v("1.2.7 "),e("code",[o._v("URL")]),o._v("地址重写")]),o._v(" "),e("p",[o._v("URL地址重写是对客户端不支持Cookie的解决方案。URL地址重写的原理是将该用户Session的id信息重写到URL地址中。服务器能够解析重写后的URL获取Session的id。这样即使客户端不支持Cookie，也可以使用Session来记录用户状态。")]),o._v(" "),e("p",[o._v("2、Cookie和Session的区别")]),o._v(" "),e("ul",[e("li",[e("p",[o._v("Cookie数据存档在客户的浏览器上，session数据放在服务器上；")])]),o._v(" "),e("li",[e("p",[o._v("cookie不是很安全，别人可以分析存放在本地的Cookie并进行Cookie欺骗，考虑到安全应当使用session；")])])]),o._v(" "),e("p",[o._v("所以要进行cookie欺骗可以有多种途径：")]),o._v(" "),e("p",[o._v("1、跳过浏览器，直接对通讯数据改写")]),o._v(" "),e("p",[o._v("2、修改浏览器，让浏览器从本地可以读写任意域名cookie")]),o._v(" "),e("p",[o._v("3、使用签名脚本，让浏览器从本地可以读写任意域名cookie（有安全问题）")]),o._v(" "),e("p",[o._v("4、欺骗浏览器，让浏览器获得假的域名")]),o._v(" "),e("ul",[e("li",[e("p",[o._v("设置cookie时间可以使cookie过期。但是使用session-destroy()，我们将会销毁会话；")])]),o._v(" "),e("li",[e("p",[o._v("session会在一定时间内保存在服务器上。当访问增多，会比较占用服务器的性能，从性能角度考虑，应当使用cookie；")])]),o._v(" "),e("li",[e("p",[o._v("单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。（Session对象没有对存储数量的限制，其中可以保存更为复杂的数据类型）。")])])])])}),[],!1,null,null,null);e.default=v.exports}}]);