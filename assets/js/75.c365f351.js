(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{535:function(v,_,t){"use strict";t.r(_);var a=t(1),r=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h3",{attrs:{id:"什么是线程和进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程和进程"}},[v._v("#")]),v._v(" 什么是线程和进程?")]),v._v(" "),_("h4",{attrs:{id:"何为进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#何为进程"}},[v._v("#")]),v._v(" 何为进程?")]),v._v(" "),_("p",[v._v("进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。")]),v._v(" "),_("p",[v._v("在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。")]),v._v(" "),_("h4",{attrs:{id:"何为线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#何为线程"}},[v._v("#")]),v._v(" 何为线程?")]),v._v(" "),_("p",[v._v("线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的"),_("strong",[v._v("堆")]),v._v(" "),_("strong",[v._v("方法区")]),v._v(" "),_("strong",[v._v("程序计数器")]),v._v(" "),_("strong",[v._v("虚拟机栈")]),v._v(" "),_("strong",[v._v("本地方法栈")])]),v._v(" "),_("p",[_("strong",[v._v("一个 Java 程序的运行是 main 线程和多个其他线程同时运行")]),v._v("。")]),v._v(" "),_("h4",{attrs:{id:"请简要描述线程与进程的关系-区别及优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请简要描述线程与进程的关系-区别及优缺点"}},[v._v("#")]),v._v(" 请简要描述线程与进程的关系,区别及优缺点？")]),v._v(" "),_("p",[v._v("从 JVM 角度说进程和线程之间的关系。")]),v._v(" "),_("p",[v._v("一个进程中可以有多个线程，多个线程共享进程的"),_("strong",[v._v("堆")]),v._v("和**方法区 (JDK1.8 之后的元空间)*"),_("em",[v._v("资源，但是每个线程有自己的*"),_("em",[v._v("程序计数器")])]),v._v("、"),_("strong",[v._v("虚拟机栈")]),v._v(" 和 "),_("strong",[v._v("本地方法栈")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("总结：")]),v._v(" "),_("strong",[v._v("线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。")])]),v._v(" "),_("p",[_("strong",[v._v("程序计数器为什么是私有的?")])]),v._v(" "),_("p",[v._v("程序计数器主要有下面两个作用：")]),v._v(" "),_("ol",[_("li",[v._v("字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。")]),v._v(" "),_("li",[v._v("在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。")])]),v._v(" "),_("p",[v._v("需要注意的是，如果执行的是 native 方法，那么程序计数器记录的是 undefined 地址，只有执行的是 Java 代码时程序计数器记录的才是下一条指令的地址。")]),v._v(" "),_("p",[v._v("所以，程序计数器私有主要是为了"),_("strong",[v._v("线程切换后能恢复到正确的执行位置")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("虚拟机栈和本地方法栈为什么是私有的?")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("虚拟机栈：")]),v._v(" 每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。")]),v._v(" "),_("li",[_("strong",[v._v("本地方法栈：")]),v._v(" 和虚拟机栈所发挥的作用非常相似，区别是： "),_("strong",[v._v("虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。")]),v._v(" 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。")])]),v._v(" "),_("p",[v._v("所以，为了"),_("strong",[v._v("保证线程中的局部变量不被别的线程访问到")]),v._v("，虚拟机栈和本地方法栈是线程私有的。")]),v._v(" "),_("p",[_("strong",[v._v("一句话简单了解堆和方法区")])]),v._v(" "),_("p",[v._v("堆和方法区是所有线程共享的资源，其中堆是进程中最大的一块内存，主要用于存放新创建的对象 (几乎所有对象都在这里分配内存)，方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")]),v._v(" "),_("h3",{attrs:{id:"并发与并行的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发与并行的区别"}},[v._v("#")]),v._v(" 并发与并行的区别")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("并发")]),v._v("：两个及两个以上的作业在同一 "),_("strong",[v._v("时间段")]),v._v(" 内执行。")]),v._v(" "),_("li",[_("strong",[v._v("并行")]),v._v("：两个及两个以上的作业在同一 "),_("strong",[v._v("时刻")]),v._v(" 执行。")])]),v._v(" "),_("p",[v._v("最关键的点是：是否是 "),_("strong",[v._v("同时")]),v._v(" 执行。")]),v._v(" "),_("h3",{attrs:{id:"同步和异步的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步的区别"}},[v._v("#")]),v._v(" 同步和异步的区别")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("同步")]),v._v(" ： 发出一个调用之后，在没有得到结果之前， 该调用就不可以返回，一直等待。")]),v._v(" "),_("li",[_("strong",[v._v("异步")]),v._v(" ：调用在发出之后，不用等待返回结果，该调用直接返回。")])]),v._v(" "),_("h3",{attrs:{id:"为什么要使用多线程呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用多线程呢"}},[v._v("#")]),v._v(" 为什么要使用多线程呢?")]),v._v(" "),_("p",[v._v("先从总体上来说：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("从计算机底层来说：")]),v._v(" 线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。")]),v._v(" "),_("li",[_("strong",[v._v("从当代互联网发展趋势来说：")]),v._v(" 现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。")])]),v._v(" "),_("p",[v._v("再深入到计算机底层来探讨：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("单核时代")]),v._v("： 在单核时代多线程主要是为了提高单进程利用 CPU 和 IO 系统的效率。 假设只运行了一个 Java 进程的情况，当我们请求 IO 的时候，如果 Java 进程中只有一个线程，此线程被 IO 阻塞则整个进程被阻塞。CPU 和 IO 设备只有一个在运行，那么可以简单地说系统整体效率只有 50%。当使用多线程的时候，一个线程被 IO 阻塞，其他线程还可以继续使用 CPU。从而提高了 Java 进程利用系统资源的整体效率。")]),v._v(" "),_("li",[_("strong",[v._v("多核时代")]),v._v(": 多核时代多线程主要是为了提高进程利用多核 CPU 的能力。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，不论系统有几个 CPU 核心，都只会有一个 CPU 核心被利用到。而创建多个线程，这些线程可以被映射到底层多个 CPU 上执行，在任务中的多个线程没有资源竞争的情况下，任务执行的效率会有显著性的提高，约等于（单核时执行时间/CPU 核心数）。")])]),v._v(" "),_("h3",{attrs:{id:"使用多线程可能带来什么问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用多线程可能带来什么问题"}},[v._v("#")]),v._v(" 使用多线程可能带来什么问题?")]),v._v(" "),_("p",[v._v("并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：内存泄漏、死锁、线程不安全等等。")]),v._v(" "),_("h3",{attrs:{id:"说说线程的生命周期和状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#说说线程的生命周期和状态"}},[v._v("#")]),v._v(" 说说线程的生命周期和状态?")]),v._v(" "),_("p",[v._v("Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态：")]),v._v(" "),_("ul",[_("li",[v._v("NEW: 初始状态，线程被创建出来但没有被调用 "),_("code",[v._v("start()")]),v._v(" 。")]),v._v(" "),_("li",[v._v("RUNNABLE: 运行状态，线程被调用了 "),_("code",[v._v("start()")]),v._v("等待运行的状态。")]),v._v(" "),_("li",[v._v("BLOCKED ：阻塞状态，需要等待锁释放。")]),v._v(" "),_("li",[v._v("WAITING：等待状态，表示该线程需要等待其他线程做出一些特定动作（通知或中断）。")]),v._v(" "),_("li",[v._v("TIME_WAITING：超时等待状态，可以在指定的时间后自行返回而不是像 WAITING 那样一直等待。")]),v._v(" "),_("li",[v._v("TERMINATED：终止状态，表示该线程已经运行完毕。")])]),v._v(" "),_("p",[v._v("线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。")]),v._v(" "),_("p",[v._v("由上图可以看出：线程创建之后它将处于 "),_("strong",[v._v("NEW（新建）")]),v._v(" 状态，调用 "),_("code",[v._v("start()")]),v._v(" 方法后开始运行，线程这时候处于 "),_("strong",[v._v("READY（可运行）")]),v._v(" 状态。可运行状态的线程获得了 CPU 时间片（timeslice）后就处于 "),_("strong",[v._v("RUNNING（运行）")]),v._v(" 状态。")]),v._v(" "),_("blockquote",[_("p",[v._v("在操作系统层面，线程有 READY 和 RUNNING 状态；而在 JVM 层面，只能看到 RUNNABLE 状态（图源："),_("a",{attrs:{href:"https://howtodoinJava.com/",target:"_blank",rel:"noopener noreferrer"}},[v._v("HowToDoInJavaopen in new window"),_("OutboundLink")],1),v._v("："),_("a",{attrs:{href:"https://howtodoinJava.com/Java/multi-threading/Java-thread-life-cycle-and-thread-states/",target:"_blank",rel:"noopener noreferrer"}},[v._v("Java Thread Life Cycle and Thread Statesopen in new window"),_("OutboundLink")],1),v._v("），所以 Java 系统一般将这两个状态统称为 "),_("strong",[v._v("RUNNABLE（运行中）")]),v._v(" 状态 。")]),v._v(" "),_("p",[_("strong",[v._v("为什么 JVM 没有区分这两种状态呢？")]),v._v(" （摘自："),_("a",{attrs:{href:"https://www.zhihu.com/question/56494969/answer/154053599",target:"_blank",rel:"noopener noreferrer"}},[v._v("Java 线程运行怎么有第六种状态？ - Dawell 的回答open in new window"),_("OutboundLink")],1),v._v(" ） 现在的时分（time-sharing）多任务（multi-task）操作系统架构通常都是用所谓的“时间分片（time quantum or time slice）”方式进行抢占式（preemptive）轮转调度（round-robin 式）。这个时间分片通常是很小的，一个线程一次最多只能在 CPU 上运行比如 10-20ms 的时间（此时处于 running 状态），也即大概只有 0.01 秒这一量级，时间片用后就要被切换下来放入调度队列的末尾等待再次调度。（也即回到 ready 状态）。线程切换的如此之快，区分这两种状态就没什么意义了。")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("当线程执行 "),_("code",[v._v("wait()")]),v._v("方法之后，线程进入 "),_("strong",[v._v("WAITING（等待）")]),v._v(" 状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("TIMED_WAITING(超时等待)")]),v._v(" 状态相当于在等待状态的基础上增加了超时限制，比如通过 "),_("code",[v._v("sleep（long millis）")]),v._v("方法或 "),_("code",[v._v("wait（long millis）")]),v._v("方法可以将线程置于 TIMED_WAITING 状态。当超时时间结束后，线程将会返回到 RUNNABLE 状态。")])]),v._v(" "),_("li",[_("p",[v._v("当线程进入 "),_("code",[v._v("synchronized")]),v._v(" 方法/块或者调用 "),_("code",[v._v("wait")]),v._v(" 后（被 "),_("code",[v._v("notify")]),v._v("）重新进入 "),_("code",[v._v("synchronized")]),v._v(" 方法/块，但是锁被其它线程占有，这个时候线程就会进入 "),_("strong",[v._v("BLOCKED（阻塞）")]),v._v(" 状态。")])]),v._v(" "),_("li",[_("p",[v._v("线程在执行完了 "),_("code",[v._v("run()")]),v._v("方法之后将会进入到 "),_("strong",[v._v("TERMINATED（终止）")]),v._v(" 状态。")])])]),v._v(" "),_("h3",{attrs:{id:"什么是上下文切换"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是上下文切换"}},[v._v("#")]),v._v(" 什么是上下文切换?")]),v._v(" "),_("p",[v._v("线程在执行过程中会有自己的运行条件和状态（也称上下文），比如上文所说到过的程序计数器，栈信息等。当出现如下情况的时候，线程会从占用 CPU 状态中退出。")]),v._v(" "),_("ul",[_("li",[v._v("主动让出 CPU，比如调用了 "),_("code",[v._v("sleep()")]),v._v(", "),_("code",[v._v("wait()")]),v._v(" 等。")]),v._v(" "),_("li",[v._v("时间片用完，因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死。")]),v._v(" "),_("li",[v._v("调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。")]),v._v(" "),_("li",[v._v("被终止或结束运行")])]),v._v(" "),_("p",[v._v("这其中前三种都会发生线程切换，线程切换意味着需要保存当前线程的上下文，留待线程下次占用 CPU 的时候恢复现场。并加载下一个将要占用 CPU 的线程上下文。这就是所谓的 "),_("strong",[v._v("上下文切换")]),v._v("。")]),v._v(" "),_("p",[v._v("上下文切换是现代操作系统的基本功能，因其每次需要保存信息恢复信息，这将会占用 CPU，内存等系统资源进行处理，也就意味着效率会有一定损耗，如果频繁切换就会造成整体效率低下。")]),v._v(" "),_("h3",{attrs:{id:"什么是线程死锁-如何避免死锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程死锁-如何避免死锁"}},[v._v("#")]),v._v(" 什么是线程死锁?如何避免死锁?")]),v._v(" "),_("p",[v._v("线程死锁描述的是这样一种情况：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。")]),v._v(" "),_("p",[v._v("互斥条件：该资源任意一个时刻只由一个线程占用。")]),v._v(" "),_("p",[v._v("请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。")]),v._v(" "),_("p",[v._v("不剥夺条件:线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。")]),v._v(" "),_("p",[v._v("循环等待条件:若干线程之间形成一种头尾相接的循环等待资源关系。")]),v._v(" "),_("h3",{attrs:{id:"如何预防和避免线程死锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何预防和避免线程死锁"}},[v._v("#")]),v._v(" 如何预防和避免线程死锁?")]),v._v(" "),_("p",[_("strong",[v._v("如何预防死锁？")]),v._v(" 破坏死锁的产生的必要条件即可：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("破坏请求与保持条件")]),v._v(" ：一次性申请所有的资源。")]),v._v(" "),_("li",[_("strong",[v._v("破坏不剥夺条件")]),v._v(" ：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。")]),v._v(" "),_("li",[_("strong",[v._v("破坏循环等待条件")]),v._v(" ：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。")])]),v._v(" "),_("p",[_("strong",[v._v("如何避免死锁？")])]),v._v(" "),_("p",[v._v("避免死锁就是在资源分配时，借助于算法（比如银行家算法）对资源分配进行计算评估，使其进入安全状态。")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("安全状态")]),v._v(" 指的是系统能够按照某种线程推进顺序（P1、P2、P3.....Pn）来为每个线程分配所需资源，直到满足每个线程对资源的最大需求，使每个线程都可顺利完成。称 `` 序列为安全序列。")])]),v._v(" "),_("p",[v._v("线程 1 首先获得到 resource1 的监视器锁,这时候线程 2 就获取不到了。然后线程 1 再去获取 resource2 的监视器锁，可以获取到。然后线程 1 释放了对 resource1、resource2 的监视器锁的占用，线程 2 获取到就可以执行了。这样就破坏了破坏循环等待条件，因此避免了死锁。")]),v._v(" "),_("h3",{attrs:{id:"sleep-方法和-wait-方法对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#sleep-方法和-wait-方法对比"}},[v._v("#")]),v._v(" sleep() 方法和 wait() 方法对比")]),v._v(" "),_("p",[_("strong",[v._v("共同点")]),v._v(" ：两者都可以暂停线程的执行。")]),v._v(" "),_("p",[_("strong",[v._v("区别")]),v._v(" ：")]),v._v(" "),_("ul",[_("li",[_("strong",[_("code",[v._v("sleep()")]),v._v(" 方法没有释放锁，而 "),_("code",[v._v("wait()")]),v._v(" 方法释放了锁")]),v._v(" 。")]),v._v(" "),_("li",[_("code",[v._v("wait()")]),v._v(" 通常被用于线程间交互/通信，"),_("code",[v._v("sleep()")]),v._v("通常被用于暂停执行。")]),v._v(" "),_("li",[_("code",[v._v("wait()")]),v._v(" 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 "),_("code",[v._v("notify()")]),v._v("或者 "),_("code",[v._v("notifyAll()")]),v._v(" 方法。"),_("code",[v._v("sleep()")]),v._v("方法执行完成后，线程会自动苏醒，或者也可以使用 "),_("code",[v._v("wait(long timeout)")]),v._v(" 超时后线程会自动苏醒。")]),v._v(" "),_("li",[_("code",[v._v("sleep()")]),v._v(" 是 "),_("code",[v._v("Thread")]),v._v(" 类的静态本地方法，"),_("code",[v._v("wait()")]),v._v(" 则是 "),_("code",[v._v("Object")]),v._v(" 类的本地方法。")])]),v._v(" "),_("h4",{attrs:{id:"为什么-wait-方法不定义在-thread-中"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么-wait-方法不定义在-thread-中"}},[v._v("#")]),v._v(" 为什么 wait() 方法不定义在 Thread 中？")]),v._v(" "),_("p",[_("code",[v._v("wait()")]),v._v(" 是让获得对象锁的线程实现等待，会自动释放当前线程占有的对象锁。每个对象（"),_("code",[v._v("Object")]),v._v("）都拥有对象锁，既然要释放当前线程占有的对象锁并让其进入 WAITING 状态，自然是要操作对应的对象（"),_("code",[v._v("Object")]),v._v("）而非当前的线程（"),_("code",[v._v("Thread")]),v._v("）。")]),v._v(" "),_("p",[v._v("类似的问题："),_("strong",[v._v("为什么 "),_("code",[v._v("sleep()")]),v._v(" 方法定义在 "),_("code",[v._v("Thread")]),v._v(" 中？")])]),v._v(" "),_("p",[v._v("因为 "),_("code",[v._v("sleep()")]),v._v(" 是让当前线程暂停执行，不涉及到对象类，也不需要获得对象锁。")]),v._v(" "),_("h4",{attrs:{id:"可以直接调用-thread-类的-run-方法吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可以直接调用-thread-类的-run-方法吗"}},[v._v("#")]),v._v(" 可以直接调用 Thread 类的 run 方法吗？")]),v._v(" "),_("p",[v._v("new 一个 "),_("code",[v._v("Thread")]),v._v("，线程进入了新建状态。调用 "),_("code",[v._v("start()")]),v._v("方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。 "),_("code",[v._v("start()")]),v._v(" 会执行线程的相应准备工作，然后自动执行 "),_("code",[v._v("run()")]),v._v(" 方法的内容，这是真正的多线程工作。 但是，直接执行 "),_("code",[v._v("run()")]),v._v(" 方法，会把 "),_("code",[v._v("run()")]),v._v(" 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。")]),v._v(" "),_("p",[_("strong",[v._v("总结： 调用 "),_("code",[v._v("start()")]),v._v(" 方法方可启动线程并使线程进入就绪状态，直接执行 "),_("code",[v._v("run()")]),v._v(" 方法的话不会以多线程的方式执行。")])])])}),[],!1,null,null,null);_.default=r.exports}}]);