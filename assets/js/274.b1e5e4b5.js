(window.webpackJsonp=window.webpackJsonp||[]).push([[274],{736:function(n,t,e){"use strict";e.r(t);var o=e(1),a=Object(o.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("用Joren工具生成相关的pdg图。")]),n._v(" "),t("p",[n._v("subtoken序列特征，这类特征就是将语句转化为token序列，然后再对token进行分词，生成subtoken序列，然后使用Glove算法来编码subtoken，使用GRU将subtoken向量序列融合为向量F1")]),n._v(" "),t("p",[n._v("与该条语句数据依赖和控制依赖的语句特征，对每一条语句，生成与其数据依赖和控制依赖的语句集合，使用Glove和GRU进行编码生成向量F2、F3。")]),n._v(" "),t("p",[n._v("使用基于Attention机制的双向GRU网络来将F1到F3这3种特征融合起来，就生成了该条语句的代码表征F'(S27)，不过这里还需要对与S27相邻的语句都算一遍F'的值，然后对这些F'加权求和才可以得到最终的F(S27)的值")]),n._v(" "),t("p",[n._v("输入神经网络模型的图信息主要包括切片的\n图结构信息和节点中的信息。节点对应的代码行\n内容已经表征为向量。切片的图结构信息包括：\n节点的唯一标识信息、节点所属的图标识信息、\n节点间关系的标识信息、图的分类标识信息。节\n点中的信息包括：节点对应的代码行内容和节点\n对应的代码行在源程序中的位置")]),n._v(" "),t("p",[n._v("输入模型的数据包含多个图（即图结构化切\n片）和多个图对应的许多节点，这些节点的信息\n将一同输入模型，因此需要对节点唯一标识，并\n标识节点所属的图，即当前节点属于哪一个图。\n节点的唯一标识信息将映射为节点输入模型的排\n序，如节点 a 的相关描述信息在输入时排序为 1，\n则表示节点 a 的唯一标识为 1。\n节点所属的图标识信息将采用图的唯一标识\n对节点一一标识，如节点的图标识信息文件中第\n1 行的信息为“3”，则节点标识为 1 的节点属于\n图标识为 3 的图。\n输入模型的所有图中节点之间的关系也是\n统一标识。节点之间关系的标识采用邻接矩阵\n的稀疏矩阵的简单表示形式，即采用边对应的\n两个节点的唯一标识来表示两个节点之间的关\n系。例如，节点标识对[1，2]表示：节点标识 1和节点标识 2 所属的图中存在一条由节点 1 指\n向节点 2 的边，节点所属的图即表明边所属\n的图。\n输入模型的所有图中节点对应的代码行将\n一起输入模型。节点对应的代码行内容被表征\n为向量，代码行向量输入的顺序和节点的图标\n识顺序一致，节点 1 对应的代码行向量输入时\n排序为 1。\n神经网络模型每次输入包含多个图的样\n本，每次输入的图结构切片统一编码，每一个\n图结构切片有唯一的键值，图的分类标识输入\n的顺序即代表图的唯一标识键值。其中，标识\n为“2”代表对应的图结构切片中存在漏洞节点，\n标识为“1”代表对应的图结构切片中没有漏洞\n节点。例如，输入顺序为 1 的图结构切片分类\n标识为“2”，表示图唯一标识为 1 的图结构切\n片存在漏洞节点。\n节点对应的代码行在源程序的位置信息的排\n序顺序和节点的唯一标识一致，可以根据节点的\n标识信息映射到节点对应的代码行在源程序中的\n位置。\n总体来说，节点和图的相关信息输入顺序即\n表示其唯一标识，如节点 a 的某个信息输入时的\n排序为 1，则节点 a 所有相关信息在输入的排序\n均为 1，图亦是如此。")]),n._v(" "),t("p",[n._v("GNN+LSTM")]),n._v(" "),t("p",[n._v("训练源代码图结构的表征信息，将图结构切片表征后作为神经网络模型的输入，图结构切片中的每一个节点可以映射到源代码中的一行代码，采用自注意力机制（self- atten-\ntion），本模型中的自注意力机制是一种全局图注\n意力机制（global graph attention），全局图注意力\n机制即考虑全图所有节点的影响，计算相邻节点\n之间的影响，经过多次计算后，使每个节点获取\n图的全局几何结构。图卷积层由多次卷积操作组\n成，每一次卷积操作每一个节点都从图中与自己\n相邻的节点获取其信息并据此更新自身信息，经\n过多次卷积操作后，每一个节点可以有效感知整个图中的所有关系和节点信息并完成自身节点信\n息的更新。\n池化层：根据上一次卷积层计算后更新的各\n个节点的信息筛选出对于最终漏洞预测影响较大\n的节点，筛选出的节点组成的子图将作为下一次\n循环的输入，本次池化层计算筛选的结果会经过\nReadOut 层读出，并作为最终图分类计算的考虑\n因素之一。经过多次卷积、池化和 ReadOut 循环后，筛\n选后的节点越来越少，对于最终漏洞预测的影响\n越来越大，但是之前被筛选的节点信息并不会丢\n弃，而是通过每次 ReadOut 保存下来，经过一定\n权重计算作为图分类的依据之一。同样，经过多\n次筛选后的节点会更大可能预测为漏洞节点。以\n上每次 ReadOut 之后的结果输入最终的多层感知\n机计算后做出图分类结果。\nReadOut 之后筛选出的节点将结合图分类结\n果，则筛选出的节点对应到属于该图的节点，并\n对应到节点对应的代码行，即漏洞代码行")])])}),[],!1,null,null,null);t.default=a.exports}}]);