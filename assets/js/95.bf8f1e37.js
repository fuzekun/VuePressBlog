(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{556:function(v,e,_){"use strict";_.r(e);var t=_(1),r=Object(t.a)({},(function(){var v=this,e=v._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h3",{attrs:{id:"servlet-server-applet-运行在服务器端的小程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#servlet-server-applet-运行在服务器端的小程序"}},[v._v("#")]),v._v(" Servlet：server applet 运行在服务器端的小程序")]),v._v(" "),e("p",[e("code",[v._v("Servlet")]),v._v("是一个接口（规则），定义了"),e("code",[v._v("Java")]),v._v("类被浏览器访问到（Tomcat识别）的规则；该"),e("code",[v._v("Java")]),v._v("类会被Tomcat识别并执行相应的代码，实现动态资源的接收和响应。")]),v._v(" "),e("ul",[e("li",[v._v("Servlet的执行原理：")])]),v._v(" "),e("p",[v._v("1、当服务器接收到客户端浏览器的请求之后，会解析请求的URL路径，获取访问的Servlet的资源路径；")]),v._v(" "),e("p",[v._v("2、查找web.xml文件，是否有对应的"),e("url-pattern",[v._v("标签体内容；")])],1),v._v(" "),e("p",[v._v("3、如果有，则再找打对应的"),e("servlet-class",[v._v("全类名；")])],1),v._v(" "),e("p",[v._v("4、Tomcat会将将字节码加载进内存，并为其创建对象；")]),v._v(" "),e("p",[v._v("5、调用其方法。")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/8b1b1cac60e94ea3a5bd936905b5878a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGVlZGNvZGVKb2huMDE=,size_18,color_FFFFFF,t_70,g_se,x_16",alt:"在这里插入图片描述"}})]),v._v(" "),e("h3",{attrs:{id:"http的请求消息数据格式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http的请求消息数据格式"}},[v._v("#")]),v._v(" HTTP的请求消息数据格式")]),v._v(" "),e("p",[v._v("对于"),e("code",[v._v("HTTP")]),v._v("协议而言，在我们获取请求消息时，我们可以将整个请求消息创建为一个对象，该对象中可以有相应的方法，来获取请求消息中的一些信息，针对这些信息，我们可以做出相应的响应。而根据请求消息，做出响应的这个过程应该由"),e("code",[v._v("service")]),v._v("方法来实现，因为该方法的参数本就是请求对象和响应对象（service()方法也就是doGet()和doPost()方法）")]),v._v(" "),e("p",[e("strong",[v._v("1、请求行")])]),v._v(" "),e("p",[v._v("请求方式 请求的"),e("code",[v._v("URL")]),v._v(" 请求协议/版本")]),v._v(" "),e("p",[e("code",[v._v("GET /login.html HTTP1.1")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("请求方式：")])]),v._v(" "),e("li",[e("p",[v._v("HTTP的请求方式有7中，常用的是"),e("code",[v._v("get")]),v._v("和"),e("code",[v._v("post")]),v._v("请求")])]),v._v(" "),e("li",[e("p",[v._v("Get：")])])]),v._v(" "),e("p",[v._v("1、请求参数在请求行中，在URL后")]),v._v(" "),e("p",[v._v("2、请求的URL长度有限制")]),v._v(" "),e("p",[v._v("3、不太安全（在URL后，能直接看见）")]),v._v(" "),e("ul",[e("li",[v._v("Post")])]),v._v(" "),e("p",[v._v("1、请求参数在请求体中")]),v._v(" "),e("p",[v._v("2、请求的URL长度是没有限制的")]),v._v(" "),e("p",[v._v("3、相对安全")]),v._v(" "),e("p",[e("strong",[v._v("2、请求头：客户端告诉服务器的一些信息")])]),v._v(" "),e("p",[v._v("请求头名称：请求头值")]),v._v(" "),e("ul",[e("li",[v._v("常见的请求头：")])]),v._v(" "),e("p",[v._v("1、"),e("code",[v._v("User-Agent")]),v._v("：浏览器告诉服务器，我访问你使用的浏览器版本信息")]),v._v(" "),e("ul",[e("li",[v._v("可以在服务器端获取该头的信息，解决浏览器兼容问题")])]),v._v(" "),e("p",[v._v("2、Referer http://localhost/login.html")]),v._v(" "),e("ul",[e("li",[v._v("告诉服务器，当前请求从哪里来？")])]),v._v(" "),e("p",[v._v("作用：")]),v._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[v._v("1、防盗链\n\n2、统计工作\n")])])]),e("p",[v._v("3、keep-alive：保持长连接（HTTP1.0需要此参数来保持长连接，HTTP1.1之后，默认就是长连接）")]),v._v(" "),e("p",[e("strong",[v._v("3、请求空行")])]),v._v(" "),e("p",[v._v("空行，就是用于分割Post请求的请求头和请求体的。")]),v._v(" "),e("p",[e("strong",[v._v("4、请求体（正文）")]),v._v("：")]),v._v(" "),e("ul",[e("li",[v._v("封装"),e("code",[v._v("POST")]),v._v("请求的请求参数（"),e("code",[v._v("GET")]),v._v("请求没有请求体）："),e("code",[v._v("Post")]),v._v("请求比如在提交表单时，要将表单中的表单项参数提交到服务端")])]),v._v(" "),e("h3",{attrs:{id:"一、servlet简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、servlet简介"}},[v._v("#")]),v._v(" 一、servlet简介")]),v._v(" "),e("p",[e("strong",[v._v("1、什么是servlet")])]),v._v(" "),e("p",[v._v("Servlet是运行在服务器端的小程序，是sun公司提供一套规范（接口），用来处理客户端请求、响应给浏览器的动态资源。但Servlet的实质就是Java代码，通过Java的API动态的向客户端输出内容。")]),v._v(" "),e("p",[e("code",[v._v("servlet")]),v._v("规范：包含三个技术点")]),v._v(" "),e("p",[v._v("1）servlet技术")]),v._v(" "),e("p",[v._v("2）filter技术---过滤器")]),v._v(" "),e("p",[v._v("3）listener技术--监听器")]),v._v(" "),e("p",[e("strong",[v._v("2、Servlet快速入门")])]),v._v(" "),e("p",[v._v("实现步骤：")]),v._v(" "),e("p",[v._v("1）创建类实现Servlet接口")]),v._v(" "),e("p",[v._v("2）覆盖尚未实现的方法---service方法")]),v._v(" "),e("p",[v._v("3）在web.xml中进行servlet配置")]),v._v(" "),e("p",[v._v("但在实际开发中，我们不会直接去实现servlet接口，因为那样需要覆盖的方法太多了，我们一般创建类继承HttpServlet")]),v._v(" "),e("p",[v._v("实现步骤：")]),v._v(" "),e("p",[v._v("1）创建类继承HttpServlet类；")]),v._v(" "),e("p",[v._v("2）覆盖doGet和doPost方法；")]),v._v(" "),e("p",[v._v("3）在web.xml中进行servlet配置")]),v._v(" "),e("h3",{attrs:{id:"二、servlet中的api-生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、servlet中的api-生命周期"}},[v._v("#")]),v._v(" 二、Servlet中的API（生命周期）")]),v._v(" "),e("h4",{attrs:{id:"_1-servlet接口中的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-servlet接口中的方法"}},[v._v("#")]),v._v(" （1）Servlet接口中的方法")]),v._v(" "),e("p",[v._v("1）init（ServletConfig config）")]),v._v(" "),e("p",[v._v("何时执行：servlet对象创建的时候执行；")]),v._v(" "),e("p",[e("code",[v._v("ServletConfig")]),v._v("：代表的是该servlet对象的配置信息。")]),v._v(" "),e("p",[v._v("2）service（ServletRequest request,ServletResqonse response）")]),v._v(" "),e("p",[v._v("何时执行：每次请求都会执行；")]),v._v(" "),e("p",[v._v("ServletRequest：代表请求 认为ServletRequest内部封装的是HTTP请求消息；")]),v._v(" "),e("p",[v._v("ServletResponse：代表响应 认为要封装的是响应的信息。")]),v._v(" "),e("p",[v._v("3）destroy")]),v._v(" "),e("p",[v._v("何时执行：servlet被销毁的时候执行")]),v._v(" "),e("h4",{attrs:{id:"_2-servlet的生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-servlet的生命周期"}},[v._v("#")]),v._v(" (2)Servlet的生命周期")]),v._v(" "),e("p",[v._v("1）Servlet何时创建")]),v._v(" "),e("p",[v._v("默认第一次访问servlet时创建该对象")]),v._v(" "),e("p",[v._v("2）Servlet何时销毁")]),v._v(" "),e("p",[v._v("服务器关闭servlet就销毁了")]),v._v(" "),e("p",[v._v("3）每次访问必然执行的方法")]),v._v(" "),e("p",[v._v("service(ServletRequest req, ServletResponse res)方法")])])}),[],!1,null,null,null);e.default=r.exports}}]);