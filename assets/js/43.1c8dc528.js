(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{505:function(_,v,t){"use strict";t.r(v);var p=t(1),s=Object(p.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[_._v("要实际的应用微服务，需要解决一下四点问题：")]),_._v(" "),v("p",[_._v("1、客户端如何访问这些服务")]),_._v(" "),v("p",[_._v("2、每个服务之间如何通信")]),_._v(" "),v("p",[_._v("3、如此多的服务，如何实现？")]),_._v(" "),v("p",[_._v("4、服务挂了，如何解决？（备份方案，应急处理机制）")]),_._v(" "),v("p",[v("strong",[_._v("1、客户端如何访问这些服务")])]),_._v(" "),v("p",[_._v("原来的Monolithic方式开发，所有的服务都是本地的，UI可以直接调用，现在按功能拆分成独立的服务，跑在独立的一般都在独立的虚拟机上的 Java进程了。客户端UI如何访问他的？")]),_._v(" "),v("p",[_._v("后台有N个服务，前台就需要记住管理N个服务，一个服务下线/更新/升级，前台就要重新部署，这明显不服务我们 拆分的理念，特别当前台是移动应用的时候，通常业务变化的节奏更快。")]),_._v(" "),v("p",[_._v("另外，N个小服务的调用也是一个不小的网络开销。还有一般微服务在系统内部，通常是无 状态的，用户登录信息和权限管理最好有一个统一的地方维护管理（OAuth）。")]),_._v(" "),v("p",[_._v("所以，一般在后台N个服务和UI之间一般会一个代理或者叫API Gateway，他的作用包括：")]),_._v(" "),v("p",[_._v("① 提供统一服务入口，让微服务对前台透明")]),_._v(" "),v("p",[_._v("② 聚合后台的服务，节省流量，提升性能")]),_._v(" "),v("p",[_._v("③ 提供安全，过滤，流控等API管理功能")]),_._v(" "),v("p",[_._v("其实这个API Gateway可以有很多广义的实现办法，可以是一个软硬一体的盒子，也可以是一个简单的MVC框架，甚至是一个Node.js的服务端。他们最重要的作 用是为前台（通常是\n移动应用）提供后台服务的聚合，提供一个统一的服务出口，解除他们之间的耦合，不过API Gateway也有可能成为单点故障点或者性能的瓶颈。用过Taobao Open Platform（淘宝开放平台）的就能很容易的体会，TAO就是这个API Gateway。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/9680d9b9615c49e8a6a0d40b6639773b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGVlZGNvZGVKb2huMDE=,size_20,color_FFFFFF,t_70,g_se,x_16",alt:"在这里插入图片描述"}})]),_._v(" "),v("p",[_._v("** 2、每个服务之间如何通信**")]),_._v(" "),v("p",[_._v("所有的微服务都是独立的Java进程跑在独立的虚拟机上，所以服务间的通信就是IPC（inter process communication），已经有很多成熟的方案。现在基本最通用的有两种方式：")]),_._v(" "),v("p",[_._v("同步调用：")]),_._v(" "),v("p",[_._v("①REST（JAX-RS，Spring Boot）")]),_._v(" "),v("p",[_._v("②RPC（Thrift, Dubbo）")]),_._v(" "),v("p",[_._v("异步消息调用(Kafka, Notify, MetaQ)")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/7b4b413a5b9b40a1874120d933e4b757.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGVlZGNvZGVKb2huMDE=,size_15,color_FFFFFF,t_70,g_se,x_16",alt:"在这里插入图片描述"}})]),_._v(" "),v("p",[v("strong",[_._v("同步和异步的区别：")])]),_._v(" "),v("p",[_._v("一般同步调用比较简单，一致性强，但是容易出调用问题，性能体验上也会差些，特别是调用层次多的时候。RESTful和RPC的比较也是一个很有意 思的话题。")]),_._v(" "),v("p",[_._v("一般REST基于HTTP，更容易实现，更容易被接受，服务端实现技术也更灵活些，各个语言都能支持，同时能跨客户端，对客户端没有特殊的要求，只要封装了HTTP的SDK就能调用，所以相对使用的广一些。RPC也有自己的优点，传输协议更高效，安全更可控，特别在一个公司内部，如果有统一个 的开发规范和统一的服务框架时，他的开发效率优势更明显些。就看各自的技术积累实际条件，自己的选择了。")]),_._v(" "),v("p",[_._v("而异步消息的方式在分布式系统中有特别广泛的应用，他既能减低调用服务之间的耦合，又能成为调用之间的缓冲，确保消息积压不会冲垮被调用方，同时能保证调用方的服务体验，继续干自己该干的活，不至于被后台性能拖慢。不过需要付出的代价是一致性的减弱，需要接受数据最终一致性；还有就是后台服务一般要 实现幂等性，因为消息发送出于性能的考虑一般会有重复（保证消息的被收到且仅收到一次对性能是很大的考验）；最后就是必须引入一个独立的broker，如果公司内部没有技术积累，对broker分布式管理也是一个很大的挑战。")]),_._v(" "),v("p",[v("strong",[_._v("3、如此多的服务，如何实现？")])]),_._v(" "),v("p",[_._v("在微服务架构中，一般每一个服务都是有多个拷贝，来做负载均衡。一个服务随时可能下线，也可能应对临时访问压力增加新的服务节点。服务之间如何相互感知？服务如何管理？")]),_._v(" "),v("p",[_._v("这就是服务发现的问题了。一般有两类做法，也各有优缺点。基本都是通过zookeeper等类似技术做服务注册信息的分布式管理。当服务上线时，服务提供者将自己的服务信息注册到ZK（或类似框架），并通过心跳维持长链接，实时更新链接信息。服务调用者通过ZK寻址，根据可定制算法， 找到一个服务，还可以将服务信息缓存在本地以提高性能。当服务下线时，ZK会发通知给服务客户端。")]),_._v(" "),v("p",[v("code",[_._v("客户端做")]),_._v("：优点是架构简单，扩展灵活，只对服务注册器依赖。缺点是客户端要维护所有调用服务的地址，有技术难度，一般大公司都有成熟的内部框架支持，比如Dubbo。")]),_._v(" "),v("p",[v("code",[_._v("服务端做")]),_._v("：优点是简单，所有服务对于前台调用方透明，一般在小公司在云服务上部署的应用采用的比较多。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/83b90e94b777499a8af6f6e19a5354cd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGVlZGNvZGVKb2huMDE=,size_20,color_FFFFFF,t_70,g_se,x_16",alt:"在这里插入图片描述"}})]),_._v(" "),v("p",[v("strong",[_._v("4、服务挂了，如何解决")])]),_._v(" "),v("p",[_._v("前面提到，Monolithic方式开发一个很大的风险是，把所有鸡蛋放在一个篮子里，一荣俱荣，一损俱损。而分布式最大的特性就是网络是不可靠的。通过微服务拆分能降低这个风险，不过如果没有特别的保障，结局肯定是噩梦。所以当我们的系统是由一系列的服务调用链组成的时候，我们必须确保任一环节出问题都不至于影响整体链路。")]),_._v(" "),v("p",[_._v("相应的手段有很多：")]),_._v(" "),v("p",[_._v("①重试机制")]),_._v(" "),v("p",[_._v("②限流")]),_._v(" "),v("p",[_._v("③熔断机制")]),_._v(" "),v("p",[_._v("④负载均衡")]),_._v(" "),v("p",[_._v("⑤降级（本地缓存）")]),_._v(" "),v("p",[_._v("这些方法基本都很明确通用，比如Netflix的Hystrix：https://github.com/Netflix/Hystrix")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://img-blog.csdnimg.cn/216646c5405f4b3385ebdeec1d0e32cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbGVlZGNvZGVKb2huMDE=,size_20,color_FFFFFF,t_70,g_se,x_16",alt:"在这里插入图片描述"}})])])}),[],!1,null,null,null);v.default=s.exports}}]);