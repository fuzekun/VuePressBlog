(window.webpackJsonp=window.webpackJsonp||[]).push([[240],{700:function(e,s,v){"use strict";v.r(s);var _=v(1),a=Object(_.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h3",{attrs:{id:"redis的主从复制原理总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis的主从复制原理总结"}},[e._v("#")]),e._v(" Redis的主从复制原理总结")]),e._v(" "),s("p",[s("code",[e._v("Redis的主从复制解决了高并发下Redis读压力特别大的情况，主服务器负责写入，但是读操作可以分配到从服务器中。")])]),e._v(" "),s("p",[e._v("和MySQL的主从复制的原因一样，Redis虽然读写速度特别快，但是也会产生读压力特别大的情况。为了分担读压力，Redis支持主从复制，Redis主从结构可以采用"),s("code",[e._v("一主多从或者级联结构")]),e._v("，Redis的主从复制可以根据是否是全量分为全量同步和增量同步。下图为级联结构：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/9a6135c40e064e28a0bd341dba3ea994.png",alt:"在这里插入图片描述"}})]),e._v(" "),s("h4",{attrs:{id:"全量同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全量同步"}},[e._v("#")]),e._v(" 全量同步")]),e._v(" "),s("p",[e._v("Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。具体步骤如下：")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("从服务器连接主服务器，发送SYNC命令；")])]),e._v(" "),s("li",[s("p",[e._v("主服务器接收到SYNC命令后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令；")])]),e._v(" "),s("li",[s("p",[e._v("主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；")])]),e._v(" "),s("li",[s("p",[e._v("从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；")])]),e._v(" "),s("li",[s("p",[e._v("主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；")])]),e._v(" "),s("li",[s("p",[e._v("从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；")])])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/b7db54c5b0084aa390a51924fae255ca.png",alt:"在这里插入图片描述"}})]),e._v(" "),s("p",[e._v("完成上面几个步骤后就完成了从服务器数据初始化的所有操作，从服务器此时可以接收来自用户的读请求。")]),e._v(" "),s("h4",{attrs:{id:"增量同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#增量同步"}},[e._v("#")]),e._v(" 增量同步")]),e._v(" "),s("p",[e._v("Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。\n增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。")]),e._v(" "),s("h4",{attrs:{id:"redis主从同步策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis主从同步策略"}},[e._v("#")]),e._v(" Redis主从同步策略")]),e._v(" "),s("p",[s("code",[e._v("主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步")]),e._v("。当然，如果有需要，slave 在任何时候都可以发起全量同步。redis 策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。")]),e._v(" "),s("h4",{attrs:{id:"注意点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[e._v("#")]),e._v(" 注意点")]),e._v(" "),s("p",[e._v("如果多个Slave断线了，需要重启的时候，因为只要Slave启动，就会发送sync请求和主机全量同步，当多个同时出现的时候，可能会导致Master IO剧增宕机。")]),e._v(" "),s("p",[e._v("Redis主从复制的配置十分简单，它可以使从服务器是主服务器的完全拷贝。需要清楚Redis主从复制的几点重要内容：")]),e._v(" "),s("p",[e._v("1）"),s("code",[e._v("Redis使用异步复制")]),e._v("。但从Redis 2.8开始，从服务器会周期性的应答从复制流中处理的数据量。")]),e._v(" "),s("p",[e._v("2）一个主服务器可以有多个从服务器。")]),e._v(" "),s("p",[e._v("3）从服务器也可以接受其他从服务器的连接。除了多个从服务器连接到一个主服务器之外，多个从服务器也可以连接到一个从服务器上，形成一个图状结构。")]),e._v(" "),s("p",[e._v("4）"),s("code",[e._v("Redis主从复制不阻塞主服务器端。也就是说当若干个从服务器在进行初始同步时，主服务器仍然可以处理请求")]),e._v("。")]),e._v(" "),s("p",[e._v("5）"),s("code",[e._v("主从复制也不阻塞从服务器端")]),e._v("。当从服务器进行初始同步时，它使用旧版本的数据来应对查询请求，假设你在redis.conf配置文件是这么配置的。否则的话，你可以配置当复制流关闭时让从服务器给客户端返回一个错误。但是，当初始同步完成后，需要删除旧的数据集和加载新的数据集，在这个短暂的时间内，从服务器会阻塞连接进来的请求。")]),e._v(" "),s("p",[e._v("6）主从复制可以用来增强扩展性，使用多个从服务器来处理只读的请求（比如，繁重的排序操作可以放到从服务器去做），也可以简单的用来做数据冗余。")]),e._v(" "),s("p",[e._v("7）使用主从复制可以为主服务器免除把数据写入磁盘的消耗：在主服务器的redis.conf文件中配置“避免保存”（注释掉所有“保存“命令），然后连接一个配置为“进行保存”的从服务器即可。但是这个配置要确保主服务器不会自动重启（要获得更多信息请阅读下一段）")]),e._v(" "),s("h3",{attrs:{id:"主从复制的一些特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主从复制的一些特点"}},[e._v("#")]),e._v(" 主从复制的一些特点：")]),e._v(" "),s("p",[e._v("1）采用异步复制；")]),e._v(" "),s("p",[e._v("2）一个主Redis可以含有多个从Redis；")]),e._v(" "),s("p",[e._v("3）每个从Redis可以接收来自其他从Redis服务器的连接；")]),e._v(" "),s("p",[e._v("4）主从复制对于主Redis是非阻塞的，这意味着当从服务器在进行主从复制同步过程中，主Redis仍然可以处理外界的访问请求；")]),e._v(" "),s("p",[e._v("5）主从复制对于从服务器来说也是非阻塞的，这意味着，即使从redis在进行主从复制过程中也可以接受外界的查询请求，只不过这时候从redis返回的是以前老的数据，如果你不想这样，那么在启动redis时，可以在配置文件中进行设置，那么从redis在复制同步过程中来自外界的查询请求都会返回错误给客户端；（虽然说主从复制过程中对于从redis是非阻塞的，但是当从redis从主redis同步过来最新的数据后还需要将新数据加载到内存中，在加载到内存的过程中是阻塞的，在这段时间内的请求将会被阻，但是即使对于大数据集，加载到内存的时间也是比较多的）；")]),e._v(" "),s("p",[e._v("6）主从复制提高了redis服务的扩展性，避免单个redis服务器的读写访问压力过大的问题，同时也可以给为数据备份及冗余提供一种解决方案；")]),e._v(" "),s("p",[e._v("7）为了解决主redis服务器写磁盘压力带来的开销，可以配置让主redis不在再将数据持久化到磁盘，而是通过连接让一个配置的从redis服务器及时的将相关数据持久化到磁盘，不过这样会存在一个问题，就是主redis服务器一旦重启，因为主redis服务器数据为空，这时候通过主从同步可能导致从redis服务器上的数据也被清空。")]),e._v(" "),s("h4",{attrs:{id:"redis大概主从同步怎么实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis大概主从同步怎么实现的"}},[e._v("#")]),e._v(" Redis大概主从同步怎么实现的？")]),e._v(" "),s("p",[s("strong",[e._v("全量同步：")])]),e._v(" "),s("p",[e._v("master服务器会开启一个后台进程用于将redis中的数据生成一个rdb文件，与此同时，服务器会缓存所有接收到的来自客户端的写命令（包含增、删、改），当后台保存进程处理完毕后，会将该rdb文件传递给slave服务器，而slave服务器会将rdb文件保存在磁盘并通过读取该文件将数据加载到内存，在此之后master服务器会将在此期间缓存的命令通过redis传输协议发送给slave服务器，然后slave服务器将这些命令依次作用于自己本地的数据集上最终达到数据的一致性。")]),e._v(" "),s("p",[s("strong",[e._v("部分同步:")])]),e._v(" "),s("p",[e._v("从redis 2.8版本以前，并不支持部分同步，当主从服务器之间的连接断掉之后，master服务器和slave服务器之间都是进行全量数据同步，但是从redis 2.8开始，即使主从连接中途断掉，也不需要进行全量同步，因为从这个版本开始融入了部分同步的概念。"),s("code",[e._v("部分同步的实现依赖于在master服务器内存中给每个slave服务器维护了一份同步日志和同步标识，每个slave服务器在跟master服务器进行同步时都会携带自己的同步标识和上次同步的最后位置")]),e._v("。当主从连接断掉之后，slave服务器隔段时间（默认1s）主动尝试和master服务器进行连接，如果从服务器携带的偏移量标识还在master服务器上的同步备份日志中，那么就从slave发送的偏移量开始继续上次的同步操作，如果slave发送的偏移量已经不再master的同步备份日志中（可能由于主从之间断掉的时间比较长或者在断掉的短暂时间内master服务器接收到大量的写操作），则必须进行一次全量更新。在部分同步过程中，master会将本地记录的同步备份日志中记录的指令依次发送给slave服务器从而达到数据一致。")]),e._v(" "),s("h4",{attrs:{id:"redis实现rdb和aof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis实现rdb和aof"}},[e._v("#")]),e._v(" Redis实现RDB和AOF")]),e._v(" "),s("p",[s("code",[e._v("RDB（快照）")]),e._v(":")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("Redis使用fork函数复制一份当前进程（父进程）的副本（子进程）")]),e._v("；")])]),e._v(" "),s("li",[s("p",[e._v("父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件；")])]),e._v(" "),s("li",[s("p",[e._v("当子进程写入完所有数据后会用该临时文件替换旧的RDB文件，至此一次快照操作完成。")])]),e._v(" "),s("li",[s("p",[e._v("在执行fork的时候操作系统（类Unix操作系统）会使用写时复制（copy-on-write）策略，即fork函数发生的一刻父子进程共享同一内存数据，当父进程要更改其中某片数据时（如执行一个写命令 ），操作系统会将该片数据复制一份以保证子进程的数据不受影响，所以新的RDB文件存储的是执行fork一刻的内存数据。")])])]),e._v(" "),s("p",[e._v("Redis在进行快照的过程中不会修改RDB文件，只有快照结束后才会将旧的文件替换成新的，也就是说任何时候RDB文件都是完整的。这使得我们可以通过定时备份RDB文件来实 现Redis数据库备份。RDB文件是经过压缩（可以配置rdbcompression参数以禁用压缩节省CPU占用）的二进制格式，所以占用的空间会小于内存中的数据大小，更加利于传输。")]),e._v(" "),s("p",[e._v("除了自动快照，还可以手动发送SAVE或BGSAVE命令让Redis执行快照，两个命令的区别在于，前者是由主进程进行快照操作，会阻塞住其他请求，后者会通过fork子进程进行快照操作。 Redis启动后会读取RDB快照文件，将数据从硬盘载入到内存。根据数据量大小与结构和服务器性能不同，这个时间也不同。通常将一个记录一千万个字符串类型键、大小为1GB的快照文件载入到内 存中需要花费20～30秒钟。 通过RDB方式实现持久化，一旦Redis异常退出，就会丢失最后一次快照以后更改的所有数据。这就需要开发者根据具体的应用场合，通过组合设置自动快照条件的方式来将可能发生的数据损失控制在能够接受的范围。如果数据很重要以至于无法承受任何损失，则可以考虑使用AOF方式进行持久化。")]),e._v(" "),s("h3",{attrs:{id:"aof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aof"}},[e._v("#")]),e._v(" AOF")]),e._v(" "),s("p",[e._v("默认情况下Redis没有开启AOF(append only file)方式的持久化，可以在redis.conf中通过appendonly参数开启：")]),e._v(" "),s("p",[e._v("appendonly yes")]),e._v(" "),s("p",[e._v("在启动时Redis会逐个执行AOF文件中的命令来将硬盘中的数据载入到内存中，载入的速度相较RDB会慢一些")]),e._v(" "),s("p",[e._v("开启AOF持久化后每执行一条会更改Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件。AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的，默认的文件名是appendonly.aof，可以通过appendfilename参数修改：")]),e._v(" "),s("p",[e._v("appendfilename appendonly.aof")]),e._v(" "),s("p",[e._v("配置redis自动重写AOF文件的条件")]),e._v(" "),s("p",[e._v("auto-aof-rewrite-percentage 100  # 当目前的AOF文件大小超过上一次重写时的AOF文件大小的百分之多少时会再次进行重写，如果之前没有重写过，则以启动时的AOF文件大小为依据")]),e._v(" "),s("p",[e._v("auto-aof-rewrite-min-size 64mb   # 允许重写的最小AOF文件大小\n配置写入AOF文件后，要求系统刷新硬盘缓存的机制")]),e._v(" "),s("p",[e._v("appendfsync always   # 每次执行写入都会执行同步，最安全也最慢")]),e._v(" "),s("p",[e._v("appendfsync everysec   # 每秒执行一次同步操作【常用】")]),e._v(" "),s("p",[e._v("appendfsync no       # 不主动进行同步操作，而是完全交由操作系统来做（即每30秒一次），最快也最不安全")]),e._v(" "),s("p",[e._v("Redis允许同时开启AOF和RDB，既保证了数据安全又使得进行备份等操作十分容易。此时重新启动Redis后Redis会使用AOF文件来恢复数据，因为AOF方式的持久化可能丢失的数据更少")])])}),[],!1,null,null,null);s.default=a.exports}}]);